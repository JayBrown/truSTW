#!/bin/bash

# certx v0.3.2
# part of truSTW v2

HOMEDIR=$(osascript -e 'POSIX path of (path to home folder)' 2>/dev/null | sed 's,/$,,')
! [[ $HOMEDIR ]] && HOMEDIR="$HOME"

process="certx"
account=$(id -u)
version="0.3.2"
vmisc=""

_tag () {
	xattr -cr "$certx_dir" 2>/dev/null
	xattr -xw com.apple.FinderInfo 0000000000000000000900000000000000000000000000000000000000000000 "$certx_dir" 2>/dev/null
	read -d '' tag_xml <<"EOF"
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<array>
	<string>truSTW</string>
</array>
</plist>
EOF
	tag_binary=$(echo "$tag_xml" | plutil -convert binary1 - -o - | xxd -p -c 256 -u)
	xattr -xw com.apple.metadata:_kMDItemUserTags "$tag_binary" "$certx_dir" 2>/dev/null
}

if [[ $1 == "-s" ]] || [[ $1 == "--silent" ]] ; then
	shift
	silent=true
else
	silent=false
fi

! $silent && echo "$process v$version$vmisc [$account]"

certx_dir="$HOMEDIR/Library/Application Support/truSTW/certx"
if ! [[ -d "$certx_dir" ]] ; then
	! $silent && echo "Creating extraction directory: ~/Library/Application Support/truSTW/certx"
	rm -rf "$certx_dir" 2>/dev/null
	mkdir -p "$certx_dir" && _tag
fi

! [[ $@ ]] && { echo "Error: no input!" ; exit ; }

for filepath in "$@"
do

shortpath="${filepath/#$HOMEDIR/~}"
filename=$(basename "$filepath")
suffix="${filename##*.}"
posixdate=$(date +%s)

! $silent && echo "--------"
! $silent && echo "Accessing: $shortpath"

! [[ -e "$filepath" ]] && { echo "Error: file missing!" ; continue ; }

target_subdir="$certx_dir/$filename-$posixdate"
mkdir "$target_subdir" 2>/dev/null || { echo "Error: subfolder not created!" ; continue ; }

if [[ $suffix == pkg ]] || [[ $suffix == mpkg ]] ; then
	toc=$(xar --dump-toc=- -f "$filepath")
	echo "$toc" | xmllint --xpath '//signature[@style="RSA"]' - \
		| sed -n '/<X509Certificate>/,/<\/X509Certificate>/p' | xargs \
		| awk '{gsub("<X509Certificate>","-----BEGINCERTIFICATE-----"); gsub("</X509Certificate>","-----ENDCERTIFICATE-----"); print}' \
		| awk '{gsub(" ","\n"); print}' \
		| awk '{gsub("BEGINCERTIFICATE-----","BEGIN CERTIFICATE-----\n"); gsub("-----ENDCERTIFICATE","\n-----END CERTIFICATE"); print}' \
		| csplit -k -s -n 1 -f "$target_subdir/"cert - '/END CERTIFICATE/+1' '{3}' 2>/dev/null
	if ! [[ -f "$target_subdir/cert0" ]] ; then
		if [[ $(pkgutil --check-signature "filepath" 2>&1 | grep "^Status: no signature") ]] ; then
			echo "Error: unsigned!"
		else
			echo "Error: signature"
		fi
		rm -rf "$target_subdir" 2>/dev/null
	else
		find "$target_subdir" -type f -not -name 'cert0' -delete
		isx_leaf="$filename-$posixdate-leaf.pem"
		mv "$target_subdir/cert0" "$target_subdir/$isx_leaf"
		isx_raw=$(openssl x509 -in "$target_subdir/$isx_leaf" -inform PEM -noout -text -fingerprint -sha256 2>/dev/null)
		isxsha_raw=$(openssl x509 -in "$target_subdir/$isx_leaf" -inform PEM -noout -text -fingerprint -sha1 2>/dev/null)
		isx_subject=$(echo "$isx_raw" | grep "Subject: ")
		if [[ $(echo "$isx_subject" | grep "CN=") ]] ; then
			isx_auth=$(echo "$isx_subject" | awk -F"CN=" '{print substr($0, index($0,$2))}' | awk -F, '{print $1}')
		else
			isx_auth=$(pkgutil --check-signature "$filepath" | grep -B1 "SHA1 fingerprint: " | head -n 1 | awk '{print substr($0, index($0,$2))}')
		fi
		! [[ "$isx_auth" ]] && isx_auth="-"
		isx_akid=$(echo "$isx_raw" | grep -A1 "Authority Key Identifier" | tail -1 | xargs | sed -e 's/://g' -e 's/^keyid//')
		! [[ $isx_akid ]] && isx_akid="-"
		isx_skid=$(echo "$isx_raw" | grep -A1 "Subject Key Identifier" | tail -1 | xargs | sed 's/://g')
		! [[ $isx_skid ]] && isx_skid="-"
		isx_fp=$(echo "$isx_raw" | grep "^SHA256 Fingerprint=" | awk -F= '{print $2}' | sed 's/://g')
		! [[ $isx_fp ]] && isx_fp="-"
		isx_sha=$(echo "$isxsha_raw" | grep "^SHA1 Fingerprint=" | awk -F= '{print $2}' | sed 's/://g')
		! [[ $isx_sha ]] && isx_sha="-"
		[[ $(echo "$isx_subject" | grep "OU=") ]] && isx_id=$(echo "$isx_subject" | awk -F"OU=" '{print substr($0, index($0,$2))}' | awk -F, '{print $1}')
		! [[ $isx_id ]] && isx_id="-"
		infofilepath="$target_subdir/$filename-$posixdate-info.txt"
		echo -e "Leaf: ./$isx_leaf\nCommon name: $isx_auth\nTeam ID: $isx_id\nSHA-2 256 fingerprint: $isx_fp\nSHA-1 fingerprint: $isx_sha\nSKID: $isx_skid\nAKID: $isx_akid" \
			> "$infofilepath"
		echo -e "Leaf: ./$isx_leaf\nCommon name: $isx_auth\nTeam ID: $isx_id\nSHA-2 256 fingerprint: $isx_fp\nSHA-1 fingerprint: $isx_sha\nSKID: $isx_skid\nAKID: $isx_akid"
	fi
else
	workdir=$(pwd)
	cd "$target_subdir"
	csx_all=$(codesign -dvvvv --extract-certificates \
		--requirements "$filename-$posixdate-requirements.txt" \
		--entitlements "$filename-$posixdate-entitlements.xml" \
		"$filepath" 2>&1)
	if ! [[ -f codesign0 ]] ; then
		cd "$workdir"
		if [[ $(echo "$csx_all" | grep "^Signature=adhoc") ]] ; then
			echo "Error: ad-hoc signature!"
		elif [[ $(echo "$csx_all" | grep "^Authority=(unavailable)") ]] ; then
			sver=$(spctl -a -vvvv -t install "$filepath" 2>&1 | grep "$filename: " | awk -F": " '{print substr($0, index($0,$2))}')
			! [[ $sver ]] && sver="-"
			echo "Error: authority unavailable! ($sver)"
		else
			echo "Error: unsigned!"
		fi
		rm -rf "$target_subdir" 2>/dev/null
	else
		csx_leaf="$filename-$posixdate-leaf.der"
		mv codesign0 "$csx_leaf" 2>/dev/null
		rm -f codesign* 2>/dev/null
		cd "$workdir"
		csx_auth=$(echo "$csx_all" | grep "^Authority=" | head -n 1 | awk -F= '{print $2}' | sed 's/[][]//g')
		csx_raw=$(openssl x509 -in "$target_subdir/$csx_leaf" -inform DER -noout -text -fingerprint -sha256 2>/dev/null)
		csxsha_raw=$(openssl x509 -in "$target_subdir/$csx_leaf" -inform DER -noout -text -fingerprint -sha1 2>/dev/null)
		csx_akid=$(echo "$csx_raw" | grep -A1 "Authority Key Identifier" | tail -1 | xargs | sed -e 's/://g' -e 's/^keyid//')
		! [[ $csx_akid ]] && csx_akid="-"
		csx_skid=$(echo "$csx_raw" | grep -A1 "Subject Key Identifier" | tail -1 | xargs | sed 's/://g')
		! [[ $csx_skid ]] && csx_skid="-"
		csx_fp=$(echo "$csx_raw" | grep "^SHA256 Fingerprint=" | awk -F= '{print $2}' | sed 's/://g')
		! [[ $csx_fp ]] && csx_fp="-"
		csx_sha=$(echo "$csxsha_raw" | grep "^SHA1 Fingerprint=" | awk -F= '{print $2}' | sed 's/://g')
		! [[ $csx_sha ]] && csx_sha="-"
		csx_id=$(echo "$csx_all" | awk -F= '/^TeamIdentifier=/{print $2}')
		if [[ $csx_id == "not set" ]] || ! [[ $csx_id ]] ; then
			csx_id="-"
		fi
		infofilepath="$target_subdir/$filename-$posixdate-info.txt"
		echo -e "Leaf: ./$csx_leaf\nCommon name: $csx_auth\nTeam ID: $csx_id\nSHA-2 256 fingerprint: $csx_fp\nSHA-1 fingerprint: $csx_sha\nSKID: $csx_skid\nAKID: $csx_akid" \
			> "$infofilepath"
		echo -e "Leaf: ./$csx_leaf\nCommon name: $csx_auth\nTeam ID: $csx_id\nSHA-2 256 fingerprint: $csx_fp\nSHA-1 fingerprint: $csx_sha\nSKID: $csx_skid\nAKID: $csx_akid"
	fi
fi

done

! $silent && echo -e "--------\nDone."

exit
